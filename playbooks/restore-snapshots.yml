 # This playbook looks for instanced tagged with NodeType: (controllers, edges, service, redis)
 # It shuts down any instances found, detaches and deletes the current volumes, and restores volumes from a snapshot
 # The snapshots are determined by their tag snapType which should match the nodeType

 - name: Restore instance snapshots
   hosts: localhost
   connection: local
   vars_files:
    - vars/external_vars.yml
   tasks:
    - name: Gather facts for "{{ node_type }}" node type
      ec2_remote_facts: 
        region: "{{ aws_region }}"
        filters:
          "tag:env": sanity
          "tag:NodeType": "{{ node_type }}"
      register: controllers

    - name: Gather "{{ node_type }}" snapshot facts
      ec2_snapshot_facts:
        region: "{{ aws_region }}"
        filters:
          "tag:snapType": "{{ node_type }}"
      register: ctrl_snapshots

    - debug: var=ctrl_snapshots
    - fail: msg="No snapshots were found tagged with snapType '{{ node_type }}'"
      when: ctrl_snapshots.snapshots == []

    - name: Store instance IDs
      set_fact: ctrl_instance_id="{{ item.id }}"
      with_items: "{{ controllers.instances }}"
      register: ctrl_result

    - name: Turn result into list
      set_fact: ctrl_instance_ids="{{ ctrl_result.results | map(attribute='ansible_facts.ctrl_instance_id') | list }}"

    - debug: var=ctrl_instance_ids

    - name: Shut down "{{ node_type }}" instances
      ec2:
        region: "{{ aws_region }}"
        instance_ids: "{{ ctrl_instance_ids }}"
        state: stopped
        wait: yes

    - name: Get volumes facts
      ec2_vol_facts:
        region: "{{ aws_region }}"
        filters:
          attachment.instance-id: "{{ ctrl_instance_ids }}"
      register: ctrl_volumes

    - debug: var=ctrl_volumes

    - name: Detach existing volumes
      ec2_vol:
        region: "{{ aws_region }}"
        instance: None
        id: "{{ item.id }}"
      with_items: "{{ ctrl_volumes.volumes }}"
      register: detach_result
    - debug: var=detach_result

    - name: Delete existing volumes
      ec2_vol:
        region: "{{ aws_region }}"
        id: "{{ item.id }}"
        state: "absent"
      with_items: "{{ ctrl_volumes.volumes }}"
      register: delete_result
    - debug: var=delete_result



    - name: Create and attach new volumes from snapshot
      ec2_vol:
        region: "{{ aws_region }}"
        device_name: "/dev/sda1"
        volume_type: "gp2"
        instance: "{{ item }}"
        snapshot: "{{ ctrl_snapshots.snapshots[0].snapshot_id }}"
      with_items: "{{ ctrl_instance_ids }}"
      register: attach_result

    - debug: var=attach_result

    - name: Power up instances
      ec2:
        region: "{{ aws_region }}"
        instance_ids: "{{ ctrl_instance_ids }}"
        state: running
        wait: yes

